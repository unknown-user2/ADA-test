#include<stdio.h>
#include<stdlib.h>
#include<limits.h>

int cost[10][10],n,visited[10],removed[10];
int cnt=0,heapsize=0;
int count;

int max(int a,int b)
{
	return (a>b)?a:b;
}

struct edge
{
	int v,u,dist;
}heap[10],VT[10];

typedef struct edge edg;

void makegraph()
{
	printf("\nEnter the number of vertices: ");
	scanf("%d",&n);
	for(int i=0;i<n;i++)
	{
		for(int j=0;j<n;j++)
		{
			cost[i][j]=rand()%10;
			if(cost[i][j]==0)
				cost[i][j]=INT_MAX;
		}
	}
}

edg deleteheap(edg heap[])
{
	edg min=heap[0];
	heap[0]=heap[heapsize-1];
	heapsize=heapsize-1;
	return min;
}

void swap(edg *a,edg *b)
{
	edg temp=*a;
	*a=*b;
	*b=temp;
}

void heapify(edg arr[],int n,int root)
{
	
	int largest=root;
	int left=2*root+1;
	int right=2*root+2;
	if(left<n)
	{
		if(arr[largest].dist>arr[left].dist)
			largest=left;
	}
	if(right<n)
	{
		if(arr[largest].dist>arr[right].dist)
			largest=right;
	}
	if(largest!=root)
	{
		swap(&arr[largest],&arr[root]);
		heapify(arr,n,largest);
	}
}

void heapsort(edg arr[],int n)
{
	for(int i=(n/2)-1;i>=0;i--)
	{
		heapify(arr,n,i);
	}
}

void prims()
{
	visited[0]=1;
	heap[heapsize].u=0;
	heap[heapsize].v=-1;
	heap[heapsize].dist=0;
	heapsize++;

	while(cnt!=n)
	{
		edg min=deleteheap(heap);
		VT[cnt].u=min.u;
		VT[cnt].v=min.v;
		VT[cnt].dist=min.dist;
		cnt++;
		
		int v=min.u;
		removed[v]=1;
		for(int i=1;i<n;i++)
		{
			count++;
			if(!visited[i] && !removed[i] && cost[v][i]!=INT_MAX)
			{
				visited[i]=1;
				heap[heapsize].u=i;
				heap[heapsize].v=v;
				heap[heapsize].dist=cost[v][i];
				heapsize++;
			}
			if(visited[i] && !removed[i] && cost[v][i]!=INT_MAX)
			{
				for(int j=0;j<heapsize;j++)
				{
					if(heap[j].u==i && heap[j].dist>cost[v][i])
					{
						heap[j].dist=cost[v][i];
						heap[j].v=v;
						break;
					}
				}
			}
		}
		heapsort(heap,heapsize);
	}
}

void plotter()
{
	int sum=0;
	count=0;
	makegraph();
	prims();
}

int main()
{
	FILE *fp1;
	int ch;
	
	fp1=fopen("prims.txt","a");
	plotter();
	
	fprintf(fp1,"%d\t%d\n",n,count);
	return 0;
}
