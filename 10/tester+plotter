//Source removal:
#include <stdio.h>
#include <stdlib.h>
int graph[40][40], t[40];
int bcount, top, r;
int topologicalsort(int n)
{
 int u, v, stack[40], indegree[40];
 for (int j = 0; j < n; j++)
 {
 int sum = 0;
 for (int i = 0; i < n; i++)
 sum = sum + graph[i][j];
 indegree[j] = sum;
 }
 top = -1;
 r = 0;
 for (int i = 0; i < n; i++)
 {
 if (indegree[i] == 0)
 stack[++top] = i;
 }
 while (top != -1)
 {
 u = stack[top--];
 t[r++] = u;
 for (v = 0; v < n; v++)
 {
 bcount++;
 if (graph[u][v] == 1)
 {
 indegree[v] = indegree[v] - 1;
 if (indegree[v] == 0)
 stack[++top] = v;
 }
 }
 }
 if (r != n)
 {
 printf("The graph has a cycle\nSo no topological ordering\n");
 return -1;
 }
 return 0;
}
void tester()
{
 int n;
 bcount = 0;
 printf("Enter the no. of vertices: \n");
 scanf("%d", &n);
 printf("Enter the adjacency matrix : \n");
 for (int i = 0; i < n; i++)
 {
 for (int j = 0; j < n; j++)
 {
 scanf("%d", &graph[i][j]);
 }
 }
 int c = topologicalsort(n);
 if(c==-1){
 return;
 }
 printf("Topological sorted order: \n");
 for (int i = 0; i < n; i++)
 printf("%c-->", t[i] + 65);
 printf("\n");
}
void plotter(int k)
{
 FILE *fp1 = fopen("tscrcb.txt", "a");
 FILE *fp2 = fopen("tsrcbw.txt", "a");
 int v = 0;
 for (int i = 0; i <= 10; i++)
 {
 v = i;
 if (k == 0)
 {
 for (int i = 0; i < v; i++)
 {
 for (int j = i + 1; j < v; j++)
 {
 if (i != j)
 graph[i][j] = 1;
 else
 graph[i][j] = 0;
 }
 }
 }
 if (k == 0)
 {
 for (int i = 0; i < v; i++)
 {
 for (int j = 0; j < v; j++)
 {
 graph[i][j] = 0;
 }
 }
 for (int i = 0; i < v - 1; i++)
 graph[i][i + 1] = 1;
 }
 bcount = 0;
 top = -1;
 for (int i = 0; i < 40; i++)
 t[i] = 0;
 topologicalsort(v);
 if (k == 0)
 {
 fprintf(fp2, "%d\t%d\n", v, bcount);
 }
 else
 {
 fprintf(fp1, "%d\t%d\n", v, bcount);
 }
 }
 fclose(fp1);
 fclose(fp2);
}
void main()
{
 int key;
 for (;;)
 {
 printf("Enter your choice: ");
 scanf("%d", &key);
 switch (key)
 {
 case 1:
 tester();
 break;
 case 2:
 for (int i = 0; i < 2; i++)
 plotter(i);
 break;
 default:
 break;
 }
 }
} 
