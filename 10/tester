#include<stdio.h>
#include<stdlib.h>

typedef struct queue
{
	int *arr,f,r,cnt;
}QUE;

int s[10];

void indegree(int *a[],int v,int inq[],QUE *temp,int flag[])
{
	for(int i=0;i<v;i++)
	{
		for(int j=0;j<v;j++)
		{
			if(a[j][i]==1)
				inq[i]=inq[i]+1;
		}
		if(inq[i]==0)
		{
			temp->r=(temp->r+1)%v;
			temp->arr[temp->r]=i;
			temp->cnt=temp->cnt+1;
			flag[i]=1;
		}
	}
}

void sourceremove(int *a[],int v,QUE *temp,int inq[],int flag[])
{
	int cnt=0;
	while(temp->cnt!=0)
	{
		int source=temp->arr[temp->f];
		temp->f=(temp->f+1)%v;
		s[cnt]=source;
		temp->cnt=temp->cnt-1;
		cnt++;
		
		for(int i=0;i<v;i++)
		{
			if(a[source][i]==1)
				inq[i]=inq[i]-1;
			if(inq[i]==0&&flag[i]==0)
			{
				temp->r=(temp->r+1)%v;
				temp->arr[temp->r]=i;
				temp->cnt=temp->cnt+1;
				flag[i]=1;	
			}
		}
	}
	
	if(cnt!=v)
		printf("\nThe graph is cyclic thus no topological order exists\n");
	else
	{
		printf("\nTopological order: \n");
		for(int i=0;i<v;i++)
			printf("-->%c",s[i]+65);
	}
	printf("\n");
}

int main()
{
	int v;
	printf("\nEnter the no. of vertices: ");
	scanf("%d",&v);
	
	int *arr[v];
	for(int i=0;i<v;i++)
		arr[i]=(int*)malloc(v*sizeof(int));
	
	printf("\nEnter the adjecency matrix: \n");
	for(int i=0;i<v;i++)
	{
		for(int j=0;j<v;j++)
		{
			scanf("%d",&arr[i][j]);
		}
	}
	
	printf("\nAdjecency matrix: \n");
	for(int i=0;i<v;i++)
	{
		for(int j=0;j<v;j++)
		{
			printf("%d ",arr[i][j]);
		}
		printf("\n");
	}
	
	QUE q;
	q.f=0;
	q.r=-1;
	q.cnt=0;
	q.arr=(int*)malloc(v*sizeof(int));
	
	int *inq=(int*)malloc(v*sizeof(int));
	for(int i=0;i<v;i++)
		inq[i]=0;
		
	int *flag=(int*)malloc(v*sizeof(int));
	for(int i=0;i<v;i++)
		flag[i]=0;
		
	indegree(arr,v,inq,&q,flag);
	sourceremove(arr,v,&q,inq,flag);
	
	return 0;
}
